{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","maxScroll","length","useState","position","setPosition","className","style","width","overflow","transform","transition","map","image","index","visible","src","alt","visibility","type","onClick","scrolled","disabled","App","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","onChangeHandler","event","currentTarget","name","value","max","defaultValue","Math","Number","min","checked","htmlFor","id","toString","onChange","floor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.948ad98e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const maxScroll = (images.length - frameSize) * itemWidth;\n  const [position, setPosition] = useState(0);\n\n  const handlePrevClick = () => {\n    const scrolled = position - (step * itemWidth);\n\n    if (scrolled >= 0) {\n      setPosition(scrolled);\n    } else if (infinite && scrolled < 0) {\n      setPosition((images.length - frameSize) * itemWidth);\n    } else {\n      setPosition(0);\n    }\n  };\n\n  const handleNextClick = () => {\n    const scrolled = position + (step * itemWidth);\n\n    if (scrolled <= maxScroll) {\n      setPosition(scrolled);\n    } else if (infinite && scrolled > maxScroll) {\n      setPosition((maxScroll - scrolled) + frameSize * itemWidth);\n    } else {\n      setPosition(maxScroll);\n    }\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${itemWidth * frameSize}px`,\n        overflow: 'hidden',\n      }}\n    >\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          transform: `translateX(-${position}px)`,\n          transition: `transform ${animationDuration}ms linear`,\n        }}\n      >\n        {images.map((image, index) => {\n          const visible\n          = (index + 1) * itemWidth > position\n            && (index + 1) * itemWidth <= position + frameSize * itemWidth;\n\n          return (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`${index + 1}`}\n                width={itemWidth}\n                style={{\n                  width: `${itemWidth}px`,\n                  visibility: visible ? 'visible' : 'hidden',\n                  transition: `visibility ${animationDuration}ms linear`,\n                }}\n              />\n            </li>\n          );\n        })}\n      </ul>\n      <div className=\"Carousel__button\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button--item\"\n          onClick={handlePrevClick}\n          disabled={!infinite && position <= 0}\n        >\n          &larr;\n        </button>\n        <button\n          type=\"button\"\n          className=\"Carousel__button--item\"\n          onClick={handleNextClick}\n          disabled={!infinite && position >= maxScroll}\n          data-cy=\"next\"\n        >\n          &rarr;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nconst App = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      name, value, max,\n    } = event.currentTarget;\n    const min = 0;\n    const defaultValue = Math.max(\n      Number(min),\n      Math.min(Number(max), Number(value)),\n    );\n\n    switch (name) {\n      case 'itemWidth':\n        setItemWidth(defaultValue);\n        break;\n      case 'frameSize':\n        setFrameSize(defaultValue);\n        break;\n      case 'step':\n        setStep(defaultValue);\n        break;\n      case 'animationDuration':\n        setAnimationDuration(defaultValue);\n        break;\n      case 'infinite':\n        setInfinite(event.currentTarget.checked);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        Carousel with\n        {' '}\n        {images.length}\n        {' '}\n        images\n      </h1>\n      <fieldset>\n        <label htmlFor=\"itemId\">Item width</label>\n        <input\n          id=\"itemId\"\n          name=\"itemWidth\"\n          type=\"number\"\n          value={itemWidth.toString()}\n          onChange={onChangeHandler}\n          max={1300}\n        />\n\n        <label htmlFor=\"frameId\">Frame size</label>\n        <input\n          id=\"frameId\"\n          name=\"frameSize\"\n          type=\"number\"\n          value={frameSize.toString()}\n          onChange={onChangeHandler}\n          max={Math.floor(1300 / itemWidth)}\n        />\n        <label htmlFor=\"stepId\">Step</label>\n        <input\n          id=\"stepId\"\n          name=\"step\"\n          type=\"number\"\n          value={step.toString()}\n          onChange={onChangeHandler}\n          max={images.length}\n        />\n        <label htmlFor=\"animationDuration\">Animation duration</label>\n        <input\n          name=\"animationDuration\"\n          type=\"number\"\n          value={animationDuration.toString()}\n          onChange={onChangeHandler}\n          max={10000}\n        />\n        <label>\n          Infinite\n          <input\n            name=\"infinite\"\n            type=\"checkbox\"\n            onChange={onChangeHandler}\n            checked={infinite}\n          />\n        </label>\n      </fieldset>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}