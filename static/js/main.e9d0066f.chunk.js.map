{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","settings","infinite","speed","slidesToShow","slidesToScroll","className","style","width","map","img","index","src","alt","App","useState","setStep","setFrameSize","setItemWidth","setAnimationDuration","setInfinite","onChangeHandler","event","currentTarget","name","value","max","defaultValue","Math","Number","min","checked","length","htmlFor","id","type","toString","onChange","floor","ReactDOM","render","document","getElementById"],"mappings":"mPA+CeA,EAlCmB,SAAC,GAO5B,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,KACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,kBAGMC,EAAW,CACfC,SAFE,EADJA,SAIEC,MAAOH,EACPI,aAAcN,EACdO,eAAgBR,GAGlB,OACE,qBACES,UAAU,WACVC,MAAO,CACLC,MAAM,GAAD,OAAKT,EAAYD,EAAjB,OAHT,SAOE,cAAC,IAAD,2BAAYG,GAAZ,aACGL,EAAOa,KAAI,SAACC,EAAKC,GAAN,OACV,qBAAKL,UAAU,eAAf,SACE,qBAAKM,IAAKF,EAAKG,IAAG,gBAAWF,GAASL,UAAU,cAAcE,MAAOT,KADpCW,YCuF9BI,G,YAtHH,WACV,MAAiBC,mBAAS,CACxB,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,iBAVKnB,EAAP,oBAYA,EAAwBmB,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAAkCD,mBAAS,GAA3C,mBAAOjB,EAAP,KAAkBmB,EAAlB,KACA,EAAkCF,mBAAS,KAA3C,mBAAOhB,EAAP,KAAkBmB,EAAlB,KACA,EAAkDH,mBAAS,KAA3D,mBAAOf,EAAP,KAA0BmB,EAA1B,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOb,EAAP,KAAiBkB,EAAjB,KAEMC,EAAkB,SAACC,GACvB,MAEIA,EAAMC,cADRC,EADF,EACEA,KAAMC,EADR,EACQA,MAAOC,EADf,EACeA,IAGTC,EAAeC,KAAKF,IACxBG,OAFU,GAGVD,KAAKE,IAAID,OAAOH,GAAMG,OAAOJ,KAG/B,OAAQD,GACN,IAAK,YACHN,EAAaS,GACb,MACF,IAAK,YACHV,EAAaU,GACb,MACF,IAAK,OACHX,EAAQW,GACR,MACF,IAAK,oBACHR,EAAqBQ,GACrB,MACF,IAAK,WACHP,EAAYE,EAAMC,cAAcQ,WAOtC,OACE,sBAAKzB,UAAU,MAAf,UACE,qBAAI,UAAQ,QAAZ,0BAEG,IACAV,EAAOoC,OACP,IAJH,YAOA,qCACE,uBAAOC,QAAQ,SAAf,wBACA,uBACEC,GAAG,SACHV,KAAK,YACLW,KAAK,SACLV,MAAO1B,EAAUqC,WACjBC,SAAUhB,EACVK,IAAK,OAGP,uBAAOO,QAAQ,UAAf,wBACA,uBACEC,GAAG,UACHV,KAAK,YACLW,KAAK,SACLV,MAAO3B,EAAUsC,WACjBC,SAAUhB,EACVK,IAAKE,KAAKU,MAAM,KAAOvC,KAEzB,uBAAOkC,QAAQ,SAAf,kBACA,uBACEC,GAAG,SACHV,KAAK,OACLW,KAAK,SACLV,MAAO5B,EAAKuC,WACZC,SAAUhB,EACVK,IAAK9B,EAAOoC,SAEd,uBAAOC,QAAQ,oBAAf,gCACA,uBACET,KAAK,oBACLW,KAAK,SACLV,MAAOzB,EAAkBoC,WACzBC,SAAUhB,EACVK,IAAK,MAEP,6CAEE,uBACEF,KAAK,WACLW,KAAK,WACLE,SAAUhB,EACVU,QAAS7B,UAIf,cAAC,EAAD,CACEN,OAAQA,EACRC,KAAMA,EACNC,UAAWA,EACXC,UAAWA,EACXC,kBAAmBA,EACnBE,SAAUA,SCpHlBqC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e9d0066f.chunk.js","sourcesContent":["import React from 'react';\nimport Slider from 'react-slick';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const settings = {\n    infinite,\n    speed: animationDuration,\n    slidesToShow: frameSize,\n    slidesToScroll: step,\n  };\n\n  return (\n    <div\n      className=\"Carousel\"\n      style={{\n        width: `${itemWidth * frameSize}px`,\n      }}\n    >\n\n      <Slider {...settings}>\n        {images.map((img, index) => (\n          <div className=\"Slider__item\" key={img}>\n            <img src={img} alt={`slick ${index}`} className=\"Slider__img\" width={itemWidth} />\n          </div>\n        ))}\n      </Slider>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nconst App = () => {\n  const [images] = useState([\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ]);\n  const [step, setStep] = useState(3);\n  const [frameSize, setFrameSize] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [infinite, setInfinite] = useState(false);\n\n  const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      name, value, max,\n    } = event.currentTarget;\n    const min = 0;\n    const defaultValue = Math.max(\n      Number(min),\n      Math.min(Number(max), Number(value)),\n    );\n\n    switch (name) {\n      case 'itemWidth':\n        setItemWidth(defaultValue);\n        break;\n      case 'frameSize':\n        setFrameSize(defaultValue);\n        break;\n      case 'step':\n        setStep(defaultValue);\n        break;\n      case 'animationDuration':\n        setAnimationDuration(defaultValue);\n        break;\n      case 'infinite':\n        setInfinite(event.currentTarget.checked);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        Carousel with\n        {' '}\n        {images.length}\n        {' '}\n        images\n      </h1>\n      <fieldset>\n        <label htmlFor=\"itemId\">Item width</label>\n        <input\n          id=\"itemId\"\n          name=\"itemWidth\"\n          type=\"number\"\n          value={itemWidth.toString()}\n          onChange={onChangeHandler}\n          max={1300}\n        />\n\n        <label htmlFor=\"frameId\">Frame size</label>\n        <input\n          id=\"frameId\"\n          name=\"frameSize\"\n          type=\"number\"\n          value={frameSize.toString()}\n          onChange={onChangeHandler}\n          max={Math.floor(1300 / itemWidth)}\n        />\n        <label htmlFor=\"stepId\">Step</label>\n        <input\n          id=\"stepId\"\n          name=\"step\"\n          type=\"number\"\n          value={step.toString()}\n          onChange={onChangeHandler}\n          max={images.length}\n        />\n        <label htmlFor=\"animationDuration\">Animation duration</label>\n        <input\n          name=\"animationDuration\"\n          type=\"number\"\n          value={animationDuration.toString()}\n          onChange={onChangeHandler}\n          max={10000}\n        />\n        <label>\n          Infinite\n          <input\n            name=\"infinite\"\n            type=\"checkbox\"\n            onChange={onChangeHandler}\n            checked={infinite}\n          />\n        </label>\n      </fieldset>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}